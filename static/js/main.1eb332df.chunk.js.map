{"version":3,"sources":["images/clarky.jpg","components/NavBar.js","pages/Home.js","pages/Contact.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","process","Toggle","aria-controls","Collapse","id","Nav","className","Link","React","Component","Home","src","clark","alt","Contact","About","App","path","component","exact","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,oC,gOCsB1BC,G,uLAfT,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACnD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAMC,WAApB,SACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUR,KAAMC,kBAAhB,WACA,kBAACK,EAAA,EAAIE,KAAL,CAAUR,KAAMC,gBAAhB,gB,GATHQ,IAAMC,Y,iBCUXC,E,iLAVT,OACE,yBAAKJ,UAAU,OACX,4BAAQA,UAAU,cAClB,kDACA,yBAAKK,IAAKC,IAAON,UAAU,WAAWO,IAAI,e,GANpCL,IAAMC,WCUTK,E,iLATT,OACE,yBAAKR,UAAU,OACX,4BAAQA,UAAU,cAClB,2C,GALSE,IAAMC,WCWZM,E,iLATT,OACE,yBAAKT,UAAU,OACX,4BAAQA,UAAU,cAClB,4D,GALOE,IAAMC,W,QCsBXO,E,iLAdX,OACE,8BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAMjB,UAA8BkB,UAAWR,EAAMS,OAAK,IACjE,kBAAC,IAAD,CAAOF,KAAMjB,eAAmCkB,UAAWH,IAC3D,kBAAC,IAAD,CAAOE,KAAMjB,iBAAqCkB,UAAWJ,IAC7D,kBAAC,IAAD,CAAUM,KAAK,IAAIC,GAAG,Y,GATdb,IAAMC,WCIJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAwBC,SAASC,eAAe,SD2HzE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1eb332df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clarky.c1e1d48d.jpg\";","import React from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass NavBar extends React.Component {\n    render(){\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href={process.env.PUBLIC_URL + '/'}>IronX</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href={process.env.PUBLIC_URL + '/contact'}>Contact</Nav.Link>\n                        <Nav.Link href={process.env.PUBLIC_URL + '/about'}>About</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n  };\n\n  export default NavBar;","import React from 'react';\nimport clark from '../images/clarky.jpg'\n\nclass Home extends React.Component {\n    render() {\n       return (\n         <div className=\"App\">\n             <header className=\"App-header\">\n             <p>IronX Professionals</p>\n             <img src={clark} className=\"App-logo\" alt=\"logo\" />\n             </header>\n         </div>\n       )\n    }\n }\n export default Home;","import React from 'react';\n\nclass Contact extends React.Component {\n    render() {\n       return (\n         <div className=\"App\">\n             <header className=\"App-header\">\n             <p>Callus</p>\n             </header>\n         </div>\n       )\n    }\n }\n export default Contact;","import React from 'react';\n\nclass About extends React.Component {\n    render() {\n       return (\n         <div className=\"App\">\n             <header className=\"App-header\">\n             <p>WE love pizza and steak</p>\n             </header>\n         </div>\n       )\n    }\n }\n export default About;","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar'\nimport Home from './pages/Home';\nimport Contact from './pages/Contact';\nimport About from './pages/About';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <main>\n        <NavBar/>\n        <Switch>\n          <Route path={process.env.PUBLIC_URL + '/'} component={Home} exact/>\n          <Route path={process.env.PUBLIC_URL + '/about'} component={About} />\n          <Route path={process.env.PUBLIC_URL + '/contact'} component={Contact} />\n          <Redirect from='*' to='/' />\n        </Switch>\n      </main>\n    )\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(<BrowserRouter><App/></BrowserRouter>, document.getElementById('root'))\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}